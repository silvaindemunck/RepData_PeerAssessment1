plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
5
abline(h = 0.5, col = "red")
abline(h = 0.05, col = "red")
12
abline(h = 0.05, col = "green")
dist(dFm)
dist(dFsm)
hc
heatmap(dataMatrix, col = "cm.colors(25)")
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min(distTmp))
apply(distTmp, 2, which.min())
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd$v[, 1]
svd1$v[, 1]
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2
svd2$v[, 1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[, 1] * svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*%
| t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*%
t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*%
t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(562:563)
names(ssd[562:563])
table(ssd$subject)
tabel(ssd$subject)
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
sim(sub1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[1:3])
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.com = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10, 12])
mdist <- dist(sub1[, 10:12])
hclustering < -hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
bye
bye()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1 - (2+1)/36
deck
4*13
4/52
(4/52)*13
13*(1/52)
4*(1/52)
0
8/52
12/52
2/51
1.6*0.5
(1.6*0.8)/2
64%
64
0.64
mypdf
integrate(mypdf, lower = 0, upper = 1.6)
equiv_val(sqrt(2))
(sqrt(2))
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
setwd("~/Desktop/Data science/RepData/RepData_wk2")
setwd("~/Documents/GitHub/RepData_PeerAssessment1")
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
steps_by_interval <- aggregate(steps ~ interval, Activity_data, mean)
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
library(ggplot2)
qplot
library(ggplot2)
ggplot(total_steps, aes(x = totalsteps)) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
rmean
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot(total_steps, aes(x = totalsteps)) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
rmean
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmedian <- median(steps_by_day$steps)
rmean
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
unlink('PA1_template_cache', recursive = TRUE)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
wkd_wknd <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled_data$date <- as.Date(filled_data$date)
filled_data$day <- sapply(filled_data$date, FUN = wkd_wknd)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
wkd_wknd <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled_data$date <- as.Date(filled_data$date)
filled_data$day <- sapply(filled_data$date, FUN = "wkd_wknd)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
wkd_wknd <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled_data$date <- as.Date(filled_data$date)
filled_data$day <- sapply(filled_data$date, FUN = "wkd_wknd")
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
wkd_wknd <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
}
filled_data$date <- as.Date(filled_data$date)
filled_data$day <- sapply(filled_data$date, FUN = wkd_wknd)
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
wkd_wknd <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
}
filled_data$date <- as.Date(filled_data$date)
filled_data$day <- sapply(filled_data$date, FUN = wkd_wknd)
averages <- aggregate(steps ~ interval + day, data=filled_data, mean)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
wkd_wknd <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
}
filled_data$date <- as.Date(filled_data$date)
filled_data$day <- sapply(filled_data$date, FUN = wkd_wknd)
averages <- aggregate(steps ~ interval + day, data = filled_data, mean)
activity_data <- read.csv("activity.csv")
steps_by_day <- aggregate(steps ~ date, activity_data, sum)
hist(steps_by_day$steps, main = paste("Total Steps Each Day"), col = "Gray",
xlab = "Number of Steps", ylab = "Interval")
rmean <- mean(steps_by_day$steps)
rmean
rmedian <- median(steps_by_day$steps)
rmedian
steps_by_interval <- aggregate(steps ~ interval, activity_data, mean)
plot(steps_by_interval$interval,steps_by_interval$steps, type="l", xlab="Interval", ylab="Number ofSteps",main="Average Number of Steps per Day by Interval")
max_interval <- steps_by_interval[which.max(steps_by_interval$steps),1]
max_interval
incomplete <- sum(!complete.cases(activity_data))
incomplete
fill_value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (steps_by_interval[steps_by_interval$interval==interval, "steps"])
return(filled)
}
filled_data <- activity_data
filled_data$steps <- mapply(fill_value, filled_data$steps, filled_data$interval)
total_steps <- tapply(filled_data$steps, filled_data$date, FUN=sum)
ggplot2::qplot(total_steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total_steps)
median(total_steps)
filled_data$dateType <-  ifelse(as.POSIXlt(filled_data$date)$wday %in% c(0,6), 'weekend', 'weekday')
averaged_filled_data <- aggregate(steps ~ interval + dateType, data = filled_data, mean)
ggplot(averaged_filled_data, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
